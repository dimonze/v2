<?php

/**
 * Event
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    garage
 * @subpackage model
 * @author     Garin Studio <eugeniy.b@garin-studio.ru>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Event extends BaseEvent
{
  const
    TYPE_EXHIBITION        = 1,
    TYPE_EXHIBITION_OUTER  = 2,
    TYPE_EXHIBITION_SPACE  = 3,

    TYPE_CHILDREN          = 10,
    TYPE_CHILDREN_CLASS    = 11,

    TYPE_EDUCATION         = 20,
    TYPE_EDUCATION_CLASS   = 21,
    TYPE_EDUCATION_FILM    = 22,
    TYPE_EDUCATION_MUSIC   = 23,
    TYPE_EDUCATION_BOOKS   = 24,

    TYPE_RESEARCH          = 30,
    TYPE_RESEARCH_PROJECTS = 31,

    TYPE_PERFORMANCE        = 40,
    TYPE_PERFORMANCE_PLATFORM = 41,
    TYPE_PERFORMANCE_EDUCATION = 42;

  public static
    $types = array(
      self::TYPE_EXHIBITION         => 'Выставка',
      self::TYPE_EXHIBITION_OUTER   => 'Внешний проект',
      self::TYPE_EXHIBITION_SPACE   => 'Garage Project Space',

      self::TYPE_CHILDREN           => 'Дети (события)',
      self::TYPE_CHILDREN_CLASS     => 'Дети (курсы)',

      self::TYPE_EDUCATION          => 'Образование (лекция)',
      self::TYPE_EDUCATION_CLASS    => 'Образование (курс)',
      self::TYPE_EDUCATION_FILM     => 'Образование (кино)',
      self::TYPE_EDUCATION_MUSIC    => 'Образование (музыка)',
      self::TYPE_EDUCATION_BOOKS    => 'Образование (книги)',
      self::TYPE_RESEARCH_PROJECTS  => 'Научная деятельность (Исследования)',

      self::TYPE_PERFORMANCE_PLATFORM  => '',
      self::TYPE_PERFORMANCE_EDUCATION  => 'Образовательная программа (Перформанс)',
    ),

    $titles = array(
      self::TYPE_EXHIBITION       => array(
        'title' => 'Exhibitions',
        'items' => array(
          self::TYPE_EXHIBITION       => 'Exhibitions',
          self::TYPE_EXHIBITION_OUTER => 'External Projects',
          self::TYPE_EXHIBITION_SPACE => 'Garage Project Space',
        ),
      ),

      self::TYPE_CHILDREN       => array(
        'title' => 'Kids',
        'items' => array(
          self::TYPE_CHILDREN         => 'Events',
          self::TYPE_CHILDREN_CLASS   => 'Workshops',
        ),
      ),

      self::TYPE_EDUCATION       => array(
        'title' => 'Education',
        'items' => array(
          self::TYPE_EDUCATION        => 'Lectures',
          self::TYPE_EDUCATION_CLASS  => 'Workshops',
          self::TYPE_EDUCATION_FILM   => 'Films',
          self::TYPE_EDUCATION_MUSIC  => 'Music',
          self::TYPE_EDUCATION_BOOKS  => 'Books',
        ),
      ),
      self::TYPE_RESEARCH       => array(
        'title' => 'Research',
        'items' => array(
          self::TYPE_RESEARCH_PROJECTS => 'Research Projects',
        ),
      ),
      self::TYPE_PERFORMANCE       => array(
        'title' => 'Performance',
        'items' => array(
          self::TYPE_PERFORMANCE_PLATFORM => '',
          self::TYPE_PERFORMANCE_EDUCATION  => 'EDUCATION',
        ),
      ),
    );

  private $_preview_file, $_banner_ru_file, $_banner_en_file, $_additional_file, $_images_delete;


  /**
   * @return FileStorage
   */
  protected function getStorage($prefix)
  {
    if (!$this->id) {
      throw new Exception('Unable to get storage for unsaved instance');
    }

    return new FileStorage(array(
      'level'       => 2,
      'prefix'      => 'event_' . $prefix,
    ));
  }

  public function cleanPath($path)
  {
    return str_replace(sfConfig::get('sf_web_dir'), '', $path);
  }


  public function toArray($deep = true, $prefixKey = false)
  {
    $images = array();
    foreach ($this->Images as $image) {
      $images[$image->id] = $this->cleanPath($image->file);
    }
    return array_merge(parent::toArray($deep, $prefixKey), array('images' => $images));
  }

  public function getAtype()
  {
    return max(1, floor($this->type / 10) * 10);
  }

  public function getShortDescription()
  {
    if ($short = $this->get('short')) return $short;

    $symb2 = 300;
    $symb1 = $symb2 - 70;

    $text = sfOutputEscaper::unescape($this->get('description'));
    $text = strip_tags($text);
    if (empty($text)) return null;
    if (mb_strlen($text) <= $symb2) return $text;

    preg_match('/^.{'.$symb1.'}[^.!;?]*(?:[.!;?]|$)/ism', $text, $matches);
    if (empty($matches[0]) || mb_strlen($matches[0]) > $symb2) {
      return mb_substr($text, 0, $symb2).'...';
    }

    return $matches[0];
  }

  public function getBannerImageRu()
  {
    return $this->getBannerImage('ru');
  }

  public function getBannerImageEn()
  {
    return $this->getBannerImage('en');
  }

  public function getBannerImage($lang)
  {
    if (!is_string($lang)) {
      $lang = sfContext::getInstance()->getUser()->getCulture();
    }
    return $this->id ? $this->cleanPath($this->getStorage('banner_'.$lang)->getFilename($this->id)) : false;
  }

  public function setBannerImageRu($value)
  {
    if ($value instanceOf sfValidatedFile) {
      $this->_banner_ru_file = $value;
    }
  }
  public function setBannerImageEn($value)
  {
    if ($value instanceOf sfValidatedFile) {
      $this->_banner_en_file = $value;
    }
  }
  public function setBannerImageRuDelete($value)
  {
    if ($value) {
      $this->_banner_ru_file = false;
    }
  }
  public function setBannerImageEnDelete($value)
  {
    if ($value) {
      $this->_banner_en_file = false;
    }
  }

  public function isBannerImageStored($lang)
  {
    return $this->getStorage('banner_'.$lang)->isStored($this->id);
  }

  public function getAdditionalImage()
  {
    return $this->id ? $this->cleanPath($this->getStorage('additional')->getFilename($this->id)) : false;
  }

  public function setAdditionalImage($value)
  {
    if ($value instanceOf sfValidatedFile) {
      $this->_additional_file = $value;
    }
  }
  public function setAdditionalImageDelete($value)
  {
    if ($value) {
      $this->_additional_file = false;
    }
  }

  public function getPreviewImage()
  {
    return $this->id ? $this->cleanPath($this->getStorage('preview')->getFilename($this->id)) : false;
  }

  public function getPreview1()
  {
    return $this->cleanPath($this->getStorage('preview')->getThumb(
      $this->id, 'event_preview_thumb1', array('width' => 430, 'crop' => '430x340'), 'event_preview'
    ));
  }

  public function getPreview2()
  {
    return $this->cleanPath($this->getStorage('preview')->getThumb(
      $this->id, 'event_preview_thumb2', array('width' => 210, 'crop' => '210x240'), 'event_preview'
    ));
  }

  public function getPreview3()
  {
    return $this->cleanPath($this->getStorage('preview')->getThumb(
      $this->id, 'event_preview_thumb3', array('width' => 750, 'crop' => '750x400'), 'event_preview'
    ));
  }

  public function getPreview4()
  {
    return $this->cleanPath($this->getStorage('preview')->getThumb(
      $this->id, 'event_preview_thumb4', array('width' => 335, 'crop' => '335x280'), 'event_preview'
    ));
  }

  public function getPreview5()
  {
    return $this->cleanPath($this->getStorage('preview')->getThumb(
      $this->id, 'event_preview_thumb5', array('width' => 680, 'crop' => '680x280'), 'event_preview'
    ));
  }

  public function setPreviewImage($value)
  {
    if ($value instanceOf sfValidatedFile) {
      $this->_preview_file = $value;
    }
  }


  public function setImagesUpload($value)
  {
    if (!is_array($value)) {
      return;
    }
    foreach ($value as $file) {
      $image = new EventImage();
      $image->file = $file;
      $this->Images[] = $image;
    }
  }

  public function setImagesDelete($value)
  {
    if (is_array($value)) {
      $this->_images_delete = $value;
    }
  }


  public function save(Doctrine_Connection $conn = null)
  {
    if (isset($this->Translation['en'])) {
      $en_modified = $this->Translation['en']->getModified();
      if (isset($en_modified['city'])) {
        $this->coords = $en_modified['city'] ? Geocoder::getCoords($en_modified['city']) : null;
      }
      elseif (!$this->isNew()) {
        $old = $this->getModified(true);
        $this->coords = isset($old['coords']) ? $old['coords'] : null;
      }
    }

    parent::save($conn);

    foreach (array('banner_ru', 'banner_en', 'preview', 'additional') as $itype) {
      $fname = '_' . $itype . '_file';

      if ($this->$fname instanceOf sfValidatedFile) {
        $storage = $this->getStorage($itype);
        $storage->delete($this->id);

        if ('preview' == $itype) {
          foreach (array(1, 2, 3) as $suffix) {
            $storage->delete($this->id, 'event_preview_thumb' . $suffix);
          }
        }

        $storage->buildPath($this->id);
        $target = $storage->generateFilename($this->id, null, $this->$fname->getOriginalName());
        $this->$fname->save($target);
      }
      elseif (false === $this->$fname) {
        $storage = $this->getStorage($itype)->delete($this->id);
      }

      $this->$fname = null;
    }

    if ($this->_images_delete) {
      foreach ($this->_images_delete as $image_id) {
        foreach ($this->Images as $image) {
          if ($image->id == $image_id) {
            $image->delete();
            break;
          }
        }
      }
      $this->_images_delete = null;
    }

    $this->updateSearchIndex();
  }

  public function delete(Doctrine_Connection $conn = null)
  {
    parent::delete($conn);
    foreach (array('preview', 'banner_ru', 'banner_en', 'additional', 'preview_thumb1', 'preview_thumb2', 'preview_thumb3') as $prefix) {
      $this->getStorage('preview')->delete($this->id, 'event_' . $prefix);
    }
    Search::delete($this);
  }


  public function updateSearchIndex()
  {
    if (empty($this->published_at)) {
      return Search::delete($this);
    }

    foreach (sfConfig::get('sf_languages') as $lang) {
      if (!$this->Translation[$lang]->title) {
        continue;
      }

      $doc = Search::createDocument($this);
      $doc->addField(Zend_Search_Lucene_Field::text('title', $this->Translation[$lang]->title));
      $doc->addField(Zend_Search_Lucene_Field::text(
        'contents', Search::cleanText(
          $this->Translation[$lang]->short,
          $this->Translation[$lang]->description,
          $this->Translation[$lang]->additional,
          $this->Translation[$lang]->place_address,
          $this->Translation[$lang]->place_phone
        )
      ));

      $doc->getField('title')->boost = 5;
      $doc->getField('contents')->boost = 1;

      Search::getInstance($lang)->addDocument($doc);
    }
  }
}