<?php

/**
 * Letter
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    garage
 * @subpackage model
 * @author     Garin Studio <eugeniy.b@garin-studio.ru>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Letter extends BaseLetter
{
  private $_image,
          $_event_images = array();


  /**
   * @return FileStorage
   */
  protected function getStorage($options = array())
  {
    if (!$this->id) {
      throw new Exception('Unable to get storage for unsaved instance');
    }

    $options = array_merge(array('level' => 1, 'prefix' => 'letter'), $options);

    return new FileStorage($options);
  }

  protected function getLetterEventsStorage($event_id)
  {
    $options = array(
      'prefix'      => 'letter_events',
      'name_format' => sprintf('%%s-event-%d', $event_id),
    );

    return $this->getStorage($options);
  }


  public function getImage()
  {
    return $this->isNew() ? false : str_replace(sfConfig::get('sf_web_dir'), '', $this->getStorage()->getFilename($this->id));
  }

  public function getEventImage(Event $event, $thumb)
  {
    $thumb_options = array(
      'wide'    => array('width' => 680, 'crop' => '680x280'),
      'narrow'  => array('width' => 335, 'crop' => '335x280'),
    );

    if (!isset($thumb_options[$thumb])) {
      throw new Exception(sprintf('Options for thumb "%s" is not specified', $thumb));
    }

    if ($this->getIsEventImageStored($event->id)) {
      $path = $this->getLetterEventsStorage($event->id)->getThumb($this->id, 'letter_events_'.$thumb, $thumb_options[$thumb], 'letter_events');
      return str_replace(sfConfig::get('sf_web_dir'), '', $path);
    }
    else {
      $method = $thumb == 'wide' ? 'getPreview5' : 'getPreview4';
      return $event->$method();
    }
  }

  public function setImage($value)
  {
    if ($value instanceOf sfValidatedFile) {
      $this->_image = $value;
    }
  }

  public function setEventImage($event_id, $value)
  {
    if ($value instanceOf sfValidatedFile) {
      $this->_event_images[$event_id] = $value;
    }
  }

  public function setImageDelete($value)
  {
    if ($value) {
      $this->getStorage()->delete($this->id);
    }
  }

  public function setEventImageDelete($event_id)
  {
    $storage = $this->getLetterEventsStorage($event_id);
    $storage->delete($this->id);

    foreach (array('wide', 'narrow') as $thumb) {
      $storage->delete($this->id, 'letter_events_'.$thumb);
    }
  }

  public function getIsImageStored()
  {
    return $this->getStorage()->isStored($this->id);
  }

  public function getIsEventImageStored($event_id)
  {
    return $this->isNew() ? false : $this->getLetterEventsStorage($event_id)->isStored($this->id);
  }

  public function getEventsByCategory($category)
  {
    if (empty($this->events[$category])) return array();

    return Doctrine::getTable('Event')
            ->createQueryI18N('e', $this->lang)
            ->andWhereIn('e.id', array_keys($this->events[$category]))
            ->orderBy('FIELD(e.id, '.implode(',', array_keys($this->events[$category])).')')
            ->execute();
  }

  public function getEventOptions($event_id)
  {
    foreach ($this->events as $events) {
      if (isset($events[$event_id])) {
        return $events[$event_id];
      }
    }

    return array(
      'text'      => '',
      'template'  => '',
      'button'    => '',
      'dates'     => '',
      'link'      => '',
    );
  }

  public function postSave($event)
  {
    parent::postSave($event);

    if ($this->_image instanceOf sfValidatedFile) {
      $storage = $this->getStorage();
      $storage->delete($this->id);
      $storage->buildPath($this->id);

      $target = $storage->generateFilename($this->id, null, $this->_image->getOriginalName());
      $this->_image->save($target);
      $this->_image = null;

      $thumb = new sfThumbnail(680, null, true, false, 89, null, array());
      $thumb->loadFile($target, false);
      $thumb->save($target);
      $thumb->freeAll();

      unset($storage, $thumb);
    }

    foreach ($this->_event_images as $event_id => $image) {
      if ($image instanceOf sfValidatedFile) {
        $this->setEventImageDelete($event_id);

        $storage = $this->getLetterEventsStorage($event_id);
        $storage->buildPath($this->id);

        $target = $storage->generateFilename($this->id, null, $image->getOriginalName());
        $image->save($target);

        unset($this->_event_images[$event_id], $storage);
      }
    }
  }

  public function postDelete($event)
  {
    parent::postDelete($event);

    $this->getStorage()->delete($this->id);

    foreach ($this->events as $et) {
      foreach (array_keys($et) as $event_id) {
        $this->setEventImageDelete($event_id);
      }
    }
  }


  public static function formatTextIn($text)
  {
    $text = preg_replace('/(?:\<br\/*\>){1,2}|(?:\<\/p\>\s*\<p\>)/ui', PHP_EOL, $text);
    $text = strip_tags($text);
    return $text;
  }

  public static function formatTextOut($text)
  {
    $text = preg_replace('/\n/', '<br/>', $text);
    return $text;
  }
}