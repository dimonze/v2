<?php

/**
 * Book
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    garage
 * @subpackage model
 * @author     Garin Studio <dimonze@garin-studio.ru>
 * @version    SVN: $Id: Book.class.php 473 2013-10-10 14:22:59Z dimonze $
 */
class Book extends BaseBook
{
  private $_preview_file, $_banner_ru_file, $_banner_en_file, $_additional_file, $_images_delete;

  protected function getStorage($prefix)
  {
    if (!$this->id) {
      throw new Exception('Unable to get storage for unsaved instance');
    }

    return new FileStorage(array(
      'level'       => 2,
      'prefix'      => 'book_' . $prefix,
    ));
  }

  public function cleanPath($path)
  {
    return str_replace(sfConfig::get('sf_web_dir'), '', $path);
  }


  public function toArray($deep = true, $prefixKey = false)
  {
    $images = array();
    foreach ($this->Images as $image) {
      $images[$image->id] = $this->cleanPath($image->file);
    }
    return array_merge(parent::toArray($deep, $prefixKey), array('images' => $images));
  }

  public function getPreviewThumb()
  {
    return self::cleanPath($this->getStorage('preview')->getThumb(
      $this->id, 'book_preview_thumb', array('width' => 430, 'crop' => '430x340'), 'book_preview'
    ));
  }

  public function getPreview1()
  {
    return $this->cleanPath($this->getStorage('preview')->getThumb(
      $this->id, 'book_preview_thumb1', array('width' => 430, 'crop' => '430x340'), 'book_preview'
    ));
  }

  public function getPreview2()
  {
    return $this->cleanPath($this->getStorage('preview')->getThumb(
      $this->id, 'book_preview_thumb2', array('width' => 210, 'crop' => '210x240'), 'book_preview'
    ));
  }

  public function getAtype()
  {
    return max(1, floor($this->type / 10) * 10);
  }

  public function getBannerImageRu()
  {
    return $this->getBannerImage('ru');
  }

  public function getBannerImageEn()
  {
    return $this->getBannerImage('en');
  }

  public function getBannerImage($lang)
  {
    if (!is_string($lang)) {
      $lang = sfContext::getInstance()->getUser()->getCulture();
    }
    return $this->id ? $this->cleanPath($this->getStorage('banner_'.$lang)->getFilename($this->id)) : false;
  }

  public function setBannerImageRu($value)
  {
    if ($value instanceOf sfValidatedFile) {
      $this->_banner_ru_file = $value;
    }
  }
  public function setBannerImageEn($value)
  {
    if ($value instanceOf sfValidatedFile) {
      $this->_banner_en_file = $value;
    }
  }
  public function setBannerImageRuDelete($value)
  {
    if ($value) {
      $this->_banner_ru_file = false;
    }
  }
  public function setBannerImageEnDelete($value)
  {
    if ($value) {
      $this->_banner_en_file = false;
    }
  }

  public function isBannerImageStored($lang)
  {
    return $this->getStorage('banner_'.$lang)->isStored($this->id);
  }

  public function getAdditionalImage()
  {
    return $this->id ? $this->cleanPath($this->getStorage('additional')->getFilename($this->id)) : false;
  }

  public function setAdditionalImage($value)
  {
    if ($value instanceOf sfValidatedFile) {
      $this->_additional_file = $value;
    }
  }
  public function setAdditionalImageDelete($value)
  {
    if ($value) {
      $this->_additional_file = false;
    }
  }

  public function getPreviewImage()
  {
    return $this->id ? $this->cleanPath($this->getStorage('preview')->getFilename($this->id)) : false;
  }


  public function setPreviewImage($value)
  {
    if ($value instanceOf sfValidatedFile) {
      $this->_preview_file = $value;
    }
  }



  public function setImagesDelete($value)
  {
    if (is_array($value)) {
      $this->_images_delete = $value;
    }
  }

  public function setImagesUpload($value)
  {
    if (!is_array($value)) {
      return;
    }
    foreach ($value as $file) {
      $image = new BookImage();
      $image->file = $file;
      $this->Images[] = $image;
    }
  }

  public function save(Doctrine_Connection $conn = null)
  {
    parent::save($conn);

    foreach (array('banner_ru', 'banner_en', 'preview', 'additional') as $itype) {
      $fname = '_' . $itype . '_file';

      if ($this->$fname instanceOf sfValidatedFile) {
        $storage = $this->getStorage($itype);
        $storage->delete($this->id);

        if ('preview' == $itype) {
          foreach (array(1, 2, 3) as $suffix) {
            $storage->delete($this->id, 'book_preview_thumb' . $suffix);
          }
        }

        $storage->buildPath($this->id);
        $target = $storage->generateFilename($this->id, null, $this->$fname->getOriginalName());
        $this->$fname->save($target);
      }
      elseif (false === $this->$fname) {
        $storage = $this->getStorage($itype)->delete($this->id);
      }

      $this->$fname = null;
    }

    if ($this->_images_delete) {
      foreach ($this->_images_delete as $image_id) {
        foreach ($this->Images as $image) {
          if ($image->id == $image_id) {
            $image->delete();
            break;
          }
        }
      }
      $this->_images_delete = null;
    }

    $this->updateSearchIndex();
  }

  public function delete(Doctrine_Connection $conn = null)
  {
    parent::delete($conn);
    foreach (array('preview', 'banner_ru', 'banner_en', 'additional', 'preview_thumb1', 'preview_thumb2', 'preview_thumb3') as $prefix) {
      $this->getStorage('preview')->delete($this->id, 'book_' . $prefix);
    }
    Search::delete($this);
  }


  public function updateSearchIndex()
  {
    foreach (sfConfig::get('sf_languages') as $lang) {
      if (!$this->Translation[$lang]->book_name) {
        continue;
      }

      $doc = Search::createDocument($this);
      $doc->addField(Zend_Search_Lucene_Field::text('book_name', $this->Translation[$lang]->book_name));
      $doc->addField(Zend_Search_Lucene_Field::text(
        'contents', Search::cleanText(
          $this->Translation[$lang]->about_book,
          $this->Translation[$lang]->description,
          $this->Translation[$lang]->about_author,
          $this->Translation[$lang]->about_publishing
        )
      ));

      $doc->getField('book_name')->boost = 5;
      $doc->getField('contents')->boost = 1;

      Search::getInstance($lang)->addDocument($doc);
    }
  }
}